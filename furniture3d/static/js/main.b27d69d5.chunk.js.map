{"version":3,"sources":["components/Shelf.js","components/Floor.js","components/Wall.js","components/Scene.js","components/Controls.js","App.js","serviceWorker.js","index.js"],"names":["sections","total","Math","ceil","Shelf","sizeX","sizeY","sizeZ","color","material","attach","materialShadow","transparent","opacity","madeHoles","xSections","ySections","console","log","xSize","ySize","Array","fill","flatMap","_","j","i","x","y","z","makeHoles","holes","map","h","THREE","position","box","bBSP","ThreeBSP","newGeometry","reduce","whole","hole","subtract","toGeometry","position-y","STEP","castShadow","receiveShadow","geometry","defaultProps","Floor","orientation","props","PI","args","Wall","sizes","Scene","extend","OrbitControls","GridHelper","AxesHelper","Controls","useThree","camera","gl","domElement","target","maxAzimuthAngle","minAzimuthAngle","maxPolarAngle","minPolarAngle","maxDistance","minDistance","materials","App","useControl","type","value","min","max","items","Object","keys","antialias","alpha","onCreated","setClearColor","shadowMap","enabled","intensity","shadow-mapSize-width","shadow-mapSize-height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b27d69d5.chunk.js","sourcesContent":["import React from 'react'\nimport { ThreeBSP } from 'three-js-csg-es6'\nimport * as THREE from 'three'\n\nconst defaultProps = { color: '#ffffff' }\nconst STEP = 0.125\n\nconst min = 3\n\nconst sections = (total) => Math.ceil(total / min)\n\nconst makeHoles = ({ sizeX, sizeY }) => {\n  const xSections = sections(sizeX)\n  const ySections = sections(sizeY)\n  console.log({ xSections, ySections })\n  const xSize = sizeX / xSections\n  const ySize = sizeY / ySections\n  return new Array(ySections).fill().flatMap((_, j) => {\n    return new Array(xSections).fill().flatMap((_, i) => {\n      console.log({ j, i })\n      return {\n        xSize: xSize-STEP,\n        ySize: ySize-STEP,\n        x: (i + 1) * xSize - xSize / 2,\n        y: (j + 1) * ySize - ySize / 2,\n        z: STEP,\n      }\n    })\n  })\n}\n\nconst Shelf = ({ sizeX, sizeY, sizeZ, color }) => {\n  const material = <meshStandardMaterial attach=\"material\" color={color} />\n  const materialShadow = (\n    <meshStandardMaterial\n      attach=\"material\"\n      color={color}\n      transparent=\"true\"\n      opacity=\"0.3\"\n    />\n  )\n  const madeHoles = makeHoles({ sizeX, sizeY })\n  console.log({ madeHoles })\n  const holes = madeHoles.map(({ xSize, ySize, x, y, z }) => {\n    console.log({ xSize, ySize, x, y, z })\n    const h = new THREE.Mesh(\n      new THREE.BoxGeometry(xSize, ySize, sizeZ)\n    )\n    h.position.x = x\n    h.position.y = y\n    h.position.z = z\n    return h\n  })\n  console.log({ holes })\n\n  const box = new THREE.Mesh(new THREE.BoxGeometry(sizeX + STEP, sizeY + STEP, sizeZ))\n  box.position.x = sizeX / 2\n  box.position.y = sizeY / 2\n  // const hole = new THREE.Mesh(\n  // new THREE.BoxGeometry(sizeX - STEP, sizeY - STEP, sizeZ)\n  // )\n  // hole.position.z = STEP\n\n  const bBSP = new ThreeBSP(box)\n  const sub = holes.reduce(\n    (whole, hole) => whole.subtract(new ThreeBSP(hole)),\n    bBSP\n  )\n  const newGeometry = sub.toGeometry()\n  return (\n    <group position-y = {STEP / 2}>\n      <mesh castShadow={true} receiveShadow={false} geometry={newGeometry}>\n        {material}\n      </mesh>\n      <mesh castShadow={false} receiveShadow={true} geometry={newGeometry}>\n        {materialShadow}\n      </mesh>\n    </group>\n  )\n}\n\nShelf.defaultProps = defaultProps\nexport default Shelf\n","import React from 'react'\n\nconst defaultProps = {\n  color: '#ffffff',\n  orientation: 'floor',\n}\n\nconst Floor = ({ sizeX, sizeY, sizeZ, color, orientation }) => {\n  const floorX = 5\n  const floorY = 3\n  const floorZ = 2\n  const material = <meshLambertMaterial attach=\"material\" color={color} />\n  const materialShadow = (\n    <meshLambertMaterial\n      attach=\"material\"\n      color={color}\n      transparent={true}\n      opacity={0.2}\n    />\n  )\n  const props =\n    orientation === 'floor'\n      ? { 'rotation-x': -Math.PI / 2, 'position-y': - 0.05 }\n      : {\n          'rotation-x': 0,\n          'position-z': -floorZ / 2 - 0.05,\n          'position-y': floorY,\n        }\n\n  return (\n    <group>\n      <mesh {...props} receiveShadow={true}>\n        <planeBufferGeometry\n          attach=\"geometry\"\n          args={[(floorX + 1) * 5, (sizeY + 1) * 5]}\n        />\n        {materialShadow}\n      </mesh>\n      <mesh {...props} receiveShadow={false} castShadow={true}>\n        <planeBufferGeometry\n          attach=\"geometry\"\n          args={[(floorX + 1) * 5, (sizeY + 1) * 5]}\n        />\n        {material}\n      </mesh>\n    </group>\n  )\n}\nFloor.defaultProps = defaultProps\nexport default Floor\n","import React from 'react'\nimport Floor from 'src/components/Floor'\n\nconst Wall = (sizes) => {\n  return <Floor {...sizes} orientation=\"wall\" />\n}\n\nexport default Wall\n","import React from 'react'\nimport Shelf from 'src/components/Shelf'\nimport Floor from 'src/components/Floor'\nimport Wall from 'src/components/Wall'\n\nconst Scene = ({ color, ...sizes }) => {\n  const { sizeY } = sizes\n  return (\n    <>\n      <group position-y={sizeY/2}>\n        <Shelf {...{...sizes, color}} />\n      </group>\n      <Wall {...sizes} />\n      <Floor {...sizes} />\n    </>\n  )\n}\n\nexport default Scene\n","import React from 'react'\nimport { extend, useThree } from 'react-three-fiber'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { GridHelper, AxesHelper } from 'three'\nextend({ OrbitControls, GridHelper, AxesHelper })\n\nconst Controls = ({ sizeX, sizeY, sizeZ }) => {\n  const { camera, gl } = useThree()\n\n  return (\n    <>\n    <orbitControls\n      args={[camera, gl.domElement]}\n      target={[0, 2, 0]}\n      maxAzimuthAngle={Math.PI / 2}\n      minAzimuthAngle={-Math.PI / 2}\n      maxPolarAngle={Math.PI / 2}\n      minPolarAngle={-Math.PI / 2}\n      maxDistance={sizeZ * 6}\n      minDistance={sizeZ * 2}\n    />\n    </>\n  )\n    // <gridHelper args={[10,10]}/>\n    // <axesHelper args={[10]}/>\n}\n\nexport default Controls\n","import React from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport Scene from 'src/components/Scene'\nimport OrbitControls from 'src/components/Controls'\nimport * as THREE from 'three'\nimport { Controls, useControl } from 'react-three-gui'\n\nconst sizeZ = 2\nconst materials = {\n  'Белый': '#ffffff',\n  'Черный': '#333333',\n  'Сосна': '#fcd0aa',\n}\n\nconst App = () => {\n  const sizeX = useControl('Ширина', {\n    type: 'number',\n    value: 5,\n    min: 3,\n    max: 9,\n  })\n  const sizeY = useControl('Высота', {\n    type: 'number',\n    value: 3,\n    min: 3,\n    max: 6,\n  })\n  const material = useControl('Материал', {\n    type: 'select',\n    items: Object.keys(materials)\n  })\n  const color = materials[material]\n  const sizes = { sizeX, sizeY, sizeZ }\n  return (\n    <>\n      <Canvas\n        gl={{ antialias: true, alpha: false }}\n        camera={{ position: [sizeX / 2, sizeY + 3, sizeZ + 3] }}\n        onCreated={(args) => {\n          console.log({ args })\n          const { gl } = args\n          gl.setClearColor(new THREE.Color('#ffffff'))\n          gl.shadowMap.enabled = true\n          gl.shadowMap.type = THREE.PCFSoftShadowMap\n        }}\n      >\n        <ambientLight intensity={0.3} />\n        <pointLight\n          args={[0xffffff, 0.5]}\n          position={[-sizeX/2 - 2, 7, 10]}\n          castShadow={true}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n        />\n        <pointLight\n          args={[0xffffff, 0.5]}\n          position={[sizeX/2 + 2, 7, 10]}\n          castShadow={true}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n        />\n        <Scene {...{...sizes, color}} />\n        <OrbitControls {...sizes} />\n      </Canvas>\n      <Controls />\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}