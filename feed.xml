<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>firedev.com</title>
    <description>Building the internet one site at a time
</description>
    <link>http://firedev.github.io/</link>
    <atom:link href="http://firedev.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 09 Jun 2015 17:48:55 +0700</pubDate>
    <lastBuildDate>Tue, 09 Jun 2015 17:48:55 +0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Git: Ignore deleted files</title>
        <description>&lt;p&gt;Sometimes working with other people you with you didn’t have some of the files
in repository because they are getting in the way of your settings. &lt;code&gt;.ruby-version&lt;/code&gt;
for instance.&lt;/p&gt;

&lt;p&gt;So you check out the repository and what the…&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone ...
...
rbenv: version &lt;span class=&quot;s1&quot;&gt;&amp;#39;2.1.5&amp;#39;&lt;/span&gt; is not installed&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay you delete the pesky &lt;code&gt;.ruby-version&lt;/code&gt; but now it is there for every commit:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm .ruby-version
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
On branch master
Your branch is up-to-date with &lt;span class=&quot;s1&quot;&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.
Changes not staged &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; commit:
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&amp;quot;git add/rm &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to update what will be committed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;use &lt;span class=&quot;s2&quot;&gt;&amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot;&lt;/span&gt; to discard changes in working directory&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        deleted:    .ruby-version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s impossible to ignore it by adding to &lt;code&gt;.gitignore&lt;/code&gt; but fortunately in git
there is an option for everything.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git update-index --assume-unchanged .ruby-version
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
On branch master
Your branch is up-to-date with &lt;span class=&quot;s1&quot;&gt;&amp;#39;origin/master&amp;#39;&lt;/span&gt;.
nothing to commit, working directory clean&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Done! Phew, at least this was easy.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Jun 2015 00:00:00 +0700</pubDate>
        <link>http://firedev.github.io/posts/git-ignore-deleted-files/</link>
        <guid isPermaLink="true">http://firedev.github.io/posts/git-ignore-deleted-files/</guid>
        
        <category>git</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Getting functional in Ruby</title>
        <description>&lt;p&gt;Lately I am working on an old code base. That also means working with the old CSS.
One of the techniques to use when refactoring CSS is to replace colors with variables.
But first you need to find and catalogue all the colors in the project.&lt;/p&gt;

&lt;h2 id=&quot;extracting-colors-from-a-project&quot;&gt;Extracting colors from a project&lt;/h2&gt;

&lt;p&gt;So lets find all colors used in a project. Regular expression I came up with finds
a pound sign &lt;code&gt;#&lt;/code&gt; followed by 3 or 6 numbers or letters in the range from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;f&lt;/code&gt;
and stops at the word boundary.&lt;/p&gt;

&lt;p&gt;I am using &lt;a href=&quot;https://github.com/ggreer/the_silver_searcher&quot;&gt;The Silver Searcher&lt;/a&gt;.
The output is too human-readable so let’s throw in some options to dumb it down:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;-i --ignore-case
  Match &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;-insensitively

-o --only-matching
  Print only the matching part of the lines

--nonumbers
  No line numbers

--nofilename
  No file names

--nocolor
  No color

--nobreak
  No linebreaks between results in different files&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thats a bit of a list actually but &lt;code&gt;ag&lt;/code&gt; is fast and easy to use. Let’s pipe the output
through &lt;code&gt;sort --uniq -f&lt;/code&gt; to remove the duplicates ignoring the case and count the lines with &lt;code&gt;wc -l&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ag -io --nonumber --nofilename &lt;span class=&quot;s2&quot;&gt;&amp;quot;#([\da-f]{3}|[\da-f]{6})\b&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort --uniq &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; wc -l
229&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wow that’s a large number. The problem is, right now &lt;code&gt;#fff&lt;/code&gt; and &lt;code&gt;#ffffff&lt;/code&gt;
are treated as different colors. But I guess this is something we can fix in Ruby.&lt;/p&gt;

&lt;p&gt;Here is what we are going to do:&lt;/p&gt;

&lt;h3 id=&quot;with-the-given-list-of-colors&quot;&gt;With the given list of colors&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Convert colors to full hex&lt;/li&gt;
  &lt;li&gt;Make the list unique&lt;/li&gt;
  &lt;li&gt;Order by hue&lt;/li&gt;
  &lt;li&gt;Print the palette so we can see what is going on&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;functional-background&quot;&gt;Functional Background&lt;/h2&gt;

&lt;p&gt;After getting some inspiration from
&lt;a href=&quot;https://www.youtube.com/watch?v=tq5SQ4W3gRI&quot;&gt;Ruby Midwest 2013 Functional Principles for OO Development&lt;/a&gt;
talk by Jessica Kerr I have decided to go all functional here.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Enumerable#map&lt;/code&gt; is the single most important method here. Just keep things mappable and you’re fine.
If you are not sure about it, wrap your arguments in &lt;code&gt;Array()&lt;/code&gt;, use asterisk &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;.to_a&lt;/code&gt; method.
Just make sure you have Enumerator on input.&lt;/p&gt;

&lt;p&gt;Most Ruby developers know about the pretzel symbol-to-proc operator that converts a
given symbol into a proc that calls the same method on the given object.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sx&quot;&gt;%w(a b c)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:upcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretzel &lt;code&gt;&amp;amp;&lt;/code&gt; here simply converts &lt;code&gt;:upcase&lt;/code&gt; to a Proc so it’s basically a syntax sugar.
The ‘unpacked’ version would look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sx&quot;&gt;%w(a b c)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upcase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But I don’t want to chain my lambdas in the ugly way, too bad there is no short syntax
for lambdas in Ruby. Or is it? Turns out there is. So, given the &lt;code&gt;upper&lt;/code&gt; lambda:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upcase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Even after replacing &lt;code&gt;call&lt;/code&gt; with &lt;code&gt;.()&lt;/code&gt; it still doesn’t look nice:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sx&quot;&gt;%w(a b c)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But there is a special syntax for lambdas that makes it all sweet:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sx&quot;&gt;%w(a b c)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that’s better, and to me that was the only part missing.
So let’s store filtered &lt;code&gt;ag&lt;/code&gt; output to the ruby file and start messing around:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nofilename&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#([\da-f]{3}|[\da-f]{6})&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another less-known feature in Ruby is that you can treat the rest of file as data
if you add &lt;code&gt;__END__&lt;/code&gt; to your program. Here is an excerpt from the Ruby Docs:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;DATA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;To&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;__END__&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So we can simply use the reset of the executable file as a &lt;code&gt;DATA&lt;/code&gt; enumerator. Cool, eh?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# colors.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;__END__&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#000&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#008000&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#00A347&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;lets-get-to-business&quot;&gt;Let’s get to business&lt;/h2&gt;

&lt;p&gt;For this project I will use &lt;a href=&quot;https://github.com/jordanstephens/paleta&quot;&gt;Paleta&lt;/a&gt; gem.
We have the colors loaded into the &lt;code&gt;DATA&lt;/code&gt; enumerator. The only thing that’s left is to
create some lambdas accoding to the plan.&lt;/p&gt;

&lt;h3 id=&quot;convert-colors-to-full-hex&quot;&gt;1. Convert colors to full hex&lt;/h3&gt;
&lt;p&gt;That is easy, feed the color to Paleta and back in full hex. The only thing we need to add
is &lt;code&gt;chomp&lt;/code&gt; to get rid of the newlines in strings:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;paleta&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;to_full_hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Paleta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DATA&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:chomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_full_hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;make-the-list-unique&quot;&gt;2. Make the list unique&lt;/h3&gt;
&lt;p&gt;Simply add &lt;code&gt;.uniq&lt;/code&gt; and finally we can see the real number of unique colors in the project.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DATA&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:chomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_full_hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;221&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What?! Okay, damn it, only a few colors were not unique. White and black I guess.&lt;/p&gt;

&lt;h3 id=&quot;order-by-hue&quot;&gt;3. Order by hue&lt;/h3&gt;
&lt;p&gt;That might sound tricky but Paleta comes to the rescue.
Paleta provides a &lt;code&gt;.hue&lt;/code&gt; method that we could use to sort colors. But since they are
strings we need to convert them back to objects.&lt;/p&gt;

&lt;p&gt;That sounds fishy because it is. Let’s use this opportunity and refactor the code slightly.
We remove &lt;code&gt;.hex&lt;/code&gt; from the &lt;code&gt;to_full_hex&lt;/code&gt; method and rename it. This simple refactoring
gives us even more freedom:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;paleta&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;to_paleta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Paleta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DATA&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:chomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_paleta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;

  &lt;span class=&quot;cp&quot;&gt;__END__&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;  #000&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;  #008000&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;  ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;print-the-palette-so-we-can-see-what-is-going-on&quot;&gt;4. Print the palette so we can see what is going on&lt;/h3&gt;
&lt;p&gt;Now let’s devise a human-viewable palette so we could judge the colors.
Make some nice-looking colored &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s or something.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;to_div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;div style=&amp;#39;width: 5em; height: 3em; display: inline-block; background: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  &amp;lt;/div&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And pipe it to a new file, because at the moment of writing this Paleta generated some
warning about Rmagic.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;colors.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DATA&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:chomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_paleta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;command-line-reader&quot;&gt;Command-line reader&lt;/h2&gt;
&lt;p&gt;Okay that is nice but let’s improve it a bit. First of all lets get rid of the static DATA
so we could use it right from the command line. That also will allow us to get right of &lt;code&gt;sort&lt;/code&gt;.
Simply change &lt;code&gt;DATA&lt;/code&gt; to &lt;code&gt;ARGF&lt;/code&gt; and remove the &lt;code&gt;__END__&lt;/code&gt; part.&lt;/p&gt;

&lt;p&gt;Then lets open the resulting file right away.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;paleta&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;to_paleta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Paleta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;to_div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;div style=&amp;#39;font-family: sans-serif; width: 5em; height: 3em; border-radius 0.25em;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;               line-height: 3em; display: inline-block; margin: 0.25em; text-align: center&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;               background: #&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  #&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  &amp;lt;/div&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;colors.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ARGF&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:chomp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_paleta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;sb&quot;&gt;`open colors.html`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can pipe the output from &lt;code&gt;ag&lt;/code&gt; and even sample a single css file if needed. Don’t forget to &lt;code&gt;chmod +x colors.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&quot;https://gist.github.com/firedev/1b3e03afd9c7fca93207&quot;&gt;final version&lt;/a&gt;
you can use for processing your files or projects:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ag -io --nonumber --nofilename &lt;span class=&quot;s2&quot;&gt;&amp;quot;#([\da-f]{3}|[\da-f]{6})\b&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;path&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ./colors.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It makes sense to sort palettes by hue or lightness or saturation, this is simply
a matter of changing a method name in &lt;code&gt;.map(&amp;amp;:hue)&lt;/code&gt;. Maybe some command-line switches
would be appropriate here as well but this was enough for my needs and I just
wanted to document the approach.&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Jun 2015 00:00:00 +0700</pubDate>
        <link>http://firedev.github.io/posts/getting-functional-in-ruby/</link>
        <guid isPermaLink="true">http://firedev.github.io/posts/getting-functional-in-ruby/</guid>
        
        <category>ruby</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Chappie – What RoboCop remake should&#39;ve been</title>
        <description>&lt;p&gt;Really enjoyed watching &lt;a href=&quot;http://www.imdb.com/title/tt1823672/&quot;&gt;Chappie (2015)&lt;/a&gt; last
night.
It’s the third movie from Neill Blomkamp, the director of &lt;a href=&quot;http://www.imdb.com/title/tt1136608/&quot;&gt;District 9 (2009)&lt;/a&gt;
and &lt;a href=&quot;http://www.imdb.com/title/tt1535108/&quot;&gt;Elysium (2013)&lt;/a&gt;. RoboCop meets District 9.&lt;/p&gt;

&lt;p&gt;Okay, Elysium could be better, but I got a serious kick out of District 9 and
Chappie was right up my alley. The story is set in Johannesburg
that looks eerie as it is. To sum it up without giving too much of the plot away
let me say that the gang of small-caliber criminals are tricking a self-concious
robot into the life of crime. Abandoned buildings, crime, poverty and luxury are mixed up in the melting pot
of South Africa. Throw in some police robots and you get the idea.&lt;/p&gt;

&lt;figure class=&quot;right mb4 ml4 sm-col-3&quot;&gt;
  &lt;img class=&quot;rounded&quot; src=&quot;http://tema.ru/travel/south-africa-2/_MG_2985.jpg&quot; title=&quot;Courtesy of tema.ru&quot; /&gt;
  &lt;figcaption class=&quot;mt1&quot;&gt;
  The Vodacom building in Johannesburg was already deserted in 2006 and apparently not in a better condition now.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;With the addition of Die Antwoord who are playing basically themselves the things
started to feel simply surreal. Unfortunately apart from the Die Antwoord duo and the
guy playing Hippo other characters looked like they got in Johannesburg by mistake.
Enough with being picky though, despite the miscasts and occasional plot holes
I could not get my eyes off the screen.&lt;/p&gt;

&lt;p&gt;If you liked the original &lt;a href=&quot;http://www.imdb.com/title/tt0093870/&quot;&gt;RoboCop (1987)&lt;/a&gt;
– Chappie is going to strike similar chords. Another movie that comes to mind
and relatively unknown these days is
&lt;a href=&quot;http://www.imdb.com/title/tt0091949/&quot;&gt;Short Circut (1986)&lt;/a&gt; – I was so impressed
when I was a kid I’ve watched it seven times in the movies.&lt;/p&gt;

&lt;p&gt;Okay back then they didn’t make Jonny Five or Alex Murphy rob other people and wear bling,
so expect a different kind of entertainment here. Gangsta-style with the required plot
devices preserved: Good robot – check, Big bad robot – check, thugs, gangs – oh yeah.&lt;/p&gt;

&lt;p&gt;Wish I could watch it with kids, but the degree of f-word usage and some graphic
scenes near the last third of the movie makes it not very family-friendly.
My wife didn’t like it at all:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;— I don’t want to watch it, they are being mean to the robot&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Too bad the &lt;a href=&quot;http://www.imdb.com/title/tt1234721/&quot;&gt;RoboCop (2015)&lt;/a&gt; remake turned
out pretty bland in comparison to the original. Like a direct-to-video sequel
that were released in abundance in the 90s. Chappie kicks some serious ass.&lt;/p&gt;

&lt;p&gt;Oh and if you like retro-fitted dystopian robotic future, check out
&lt;a href=&quot;http://www.imdb.com/title/tt1631867/&quot;&gt;Edge of Tomorrow (2014)&lt;/a&gt; that one is
kids-friendly even.&lt;/p&gt;

&lt;p&gt;And I am off to seeing District 9 again.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/cegdR0GiJl4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Sun, 07 Jun 2015 00:00:00 +0700</pubDate>
        <link>http://firedev.github.io/posts/chappie-2015/</link>
        <guid isPermaLink="true">http://firedev.github.io/posts/chappie-2015/</guid>
        
        <category>movies</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Hello, Jekyll!</title>
        <description>&lt;p&gt;After unsuccessful attempts at blogging relying on 3rd party platforms like
Posterous, Tumblr, Droplr and whatnot here is my new stab at delivering ideas
to the world. Fully autonomous this time. Surprisingly there are not that many
options available for blogging…&lt;/p&gt;

&lt;p&gt;Why not Wordpress? I never really liked it, between these options and plugins
there seem to be little left to the actual content creation.
So this weekend I have decided to finally get back to blogging.&lt;/p&gt;

&lt;p&gt;Having two kids and being a freelancer I don’t have much time to fight technology.
I don’t want to mess with bloated Wordpress themes, plugins and exploits.
Making my own blog on Ruby on Rails sounds tempting but I better concentrate
on other things in life.&lt;/p&gt;

&lt;p&gt;Also forcing markdown on users in projects lately I wanted to write in markdown.
And the options that came to mind were Jekyll which I wanted to try for a long
time and Middleman. However Jekyll had less options and less of everything so it
sounded like a nice fit for a weekend project. And here it is.&lt;/p&gt;

&lt;h2 id=&quot;partials-in-jekyll&quot;&gt;Partials in Jekyll&lt;/h2&gt;
&lt;p&gt;One of the tricky part was rendering of posts. In rails I would throw in a partial.
Since there are no partials in Jekyll I had to use includes.&lt;/p&gt;

&lt;p&gt;This is what I have in my &lt;code&gt;posts&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; pages:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;post&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;in&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;site.posts&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;_post.html&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;post&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;endfor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the actual &lt;code&gt;_post.html&lt;/code&gt; include uses &lt;code&gt;include.post&lt;/code&gt; variable:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-liquid&quot; data-lang=&quot;liquid&quot;&gt;&amp;lt;h2&amp;gt;
    &amp;lt;a href=&amp;quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&amp;quot;&amp;gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&amp;lt;/a&amp;gt;
&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;excerpt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is something I would do in Rails. Everything seems pretty sweet so far.
The only issue is that I have to write HTML again which seems as a step back
after years of using Slim.&lt;/p&gt;

&lt;p&gt;Hosting the new static site at
&lt;a href=&quot;http://firedev.github.io&quot;&gt;firedev.github.io&lt;/a&gt;, courtesy of Github.
Finally I can sleep at nights knowing that
&lt;a href=&quot;http://www.theverge.com/2013/4/30/4281780/posterous-is-shutting-down-tomorrow-here-are-the-best-alternatives&quot;&gt;whatever&lt;/a&gt;
&lt;a href=&quot;http://www.engadget.com/2014/01/03/droplr-rapid-file-sharing-service-goes-pay-only&quot;&gt;crazy&lt;/a&gt;
&lt;a href=&quot;http://www.businessinsider.com/medium-budget-cuts-and-restructuring-2015-6&quot;&gt;idea&lt;/a&gt;
the companies
I’ve trusted my content to are going to get it won’t affect me.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Jun 2015 00:00:00 +0700</pubDate>
        <link>http://firedev.github.io/posts/hello-jekyll/</link>
        <guid isPermaLink="true">http://firedev.github.io/posts/hello-jekyll/</guid>
        
        <category>jekyll</category>
        
        <category>liquid</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
